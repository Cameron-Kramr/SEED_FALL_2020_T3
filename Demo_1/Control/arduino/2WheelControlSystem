//Still need to edit the functions
#include <Encoder.h>
#include "DualMC33926MotorShield.h" //PWm goes from -400 to 400 
#include <AutoPID.h>

//Pin setup
#define nD2 4 //tri-state disables both outputs of both motor channels when low
#define M1Dir 7 // Motor 1 direction input (voltage sign M1)
#define M2Dir 8 // motor 2 direction input (Voltage sign M2)
#define M1PWM 9 // Motor 1 speed input (Command Voltage M1)
#define M2PWM 10 // Motor 2 speed input (command Votlage M2)
#define nSF 12 //Status flag


#define kp_A (7.80106264935576)     //Wheel 2 velocity por. gain
#define kd_A (0)  //Wheel 2 velocity dif. gain
#define ki_A (91.4752606263456)   //Wheel 2 velocity int. gain

#define kp_B (8.0959852388045)   //Wheel 2 velocity por. gain
#define kd_B (0) //Wheel 2 velocity dif. gain
#define ki_B (100.851688119788)   //Wheel 2 velocity int. gain

Encoder MotorEncoder1(2,5); //used 2 and 3 as they have the best interrupt timing, will need to change when adding second motor
Encoder MotorEncoder2(3,6); //used 2 and 3 as they have the best interrupt timing, will need to change when adding second motor

double counter1=0; //counter for motor 1 and 2 resp.
double counter2=0;

double RadA=0;
double RadB=0;

double Vel_A=0; // Radial Velocity of motor 1
double Vel_B=0; // Radial Velocity of motor 2

double Vel_WA=0;
double Vel_WB=0;

double Vel_L=0;
double Vel_S=0;

double inputVel=0;

double RadAPrev=0;
double RadBPrev=0;

double output_A=0;
double output_B=0;

double setpoint_A=0; //Wanted wheel 1 velocity
double setpoint_B=0; //Wanted wheel 2 velocity

double r=2.88/12;// Radius of wheel in feet
double des_Rad=3.14*2;
double Radius=1; //Radius of circle 
double d=(13.15/2)/12; //Distance wheel to center in feet
double omega=1; //angle {Rad}

double Time_1=0; // time delay for next interval
double Interval_time=5;//sample interval time =5ms
double *Time=0;


//function
double Vel=0;
double count=0;
double rev=0;
double Rad=0;

//Initialize PID class variables

AutoPID Vel_A_PID(&Vel_A,&setpoint_A,&output_A,-200,200,kp_A,ki_A,kd_A);
AutoPID Vel_B_PID(&Vel_B,&setpoint_B,&output_B,-200,200,kp_B,ki_B,kd_B);

DualMC33926MotorShield motor_shield;

void setup() {
  // put your setup code here, to run once:
   pinMode(nD2,OUTPUT); 
   pinMode(M1Dir,OUTPUT);
   pinMode(M2Dir,OUTPUT);
   pinMode(M1PWM,OUTPUT);
   pinMode(M1PWM,OUTPUT);
   pinMode(nSF,INPUT);     
   motor_shield.init(); 
   Serial.begin (250000);//baud rate set to 250000
   Vel_A_PID.setTimeStep(110);
   Vel_B_PID.setTimeStep(110);
}

double CountsToRad(double count, double* Rad)
{
   rev=(count)/(64*50); // Get revolutions made for the motor 
   *Rad=rev*6.2832; // Get radians made for the motor 
}
  
double RadToVel (double Rad, double RadPrev, double Time, double* Vel)
{
  *Vel=(Rad-RadPrev)/(Time*1000);
}
  
double AngularVelToLinearA(double omega,double Radius, double* Vel_WA, double* Vel_WB)
{
     if(Radius>0)
   {
    *Vel_WA=omega*(Radius+d);//relook at d I dont remeber but i think the 1/2 needs to be removed for this equation to hold
    *Vel_WB=omega*(Radius-d);  
    }
    else{
    *Vel_WA=omega*(Radius-d);
    *Vel_WB=omega*(Radius+d);
      }

}
  
double SummingBlock(double Vel_W,double inputVel)
{
   Vel_S=Vel_W+inputVel;
   return Vel_W;
}
  
void loop() {
  while(millis()> Time_1 + Interval_time)
  {
     counter1=MotorEncoder1.read(); //get motor counts for motor 1
     counter2=MotorEncoder2.read();  //get motor counts for motor 2
     
      //finiding radial positon of each wheel 
     CountsToRad(counter1,&RadA);
     CountsToRad(counter2,&RadB);
  
     // Finding linear velocity from the radial position of each wheel 
      RadToVel(RadA,RadAPrev,Interval_time,&Vel_A);
      RadToVel(RadB,RadBPrev,Interval_time,&Vel_B);
  
     //Angular velocity input converted to linear velocity of each wheel
     AngularVelToLinearA(omega,Radius,&Vel_WA,&Vel_WB);
     
     //Summing block   
     setpoint_A=SummingBlock(Vel_WA,inputVel);
     setpoint_B=SummingBlock(Vel_WB,inputVel);
  
     //ruin the velocity controllers 
     Vel_A_PID.run(); 
     Vel_B_PID.run();
  
     motor_shield.setM1Speed(output_A);
     motor_shield.setM2Speed(output_B);
     
     Serial.println(Vel_A);
     Serial.println(Vel_B);
     
     RadAPrev=RadA;
     RadBPrev=RadB;
  
     Time_1+=Interval_time; //Change time so it runs at an incremeted 10ms
    }

}
